% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build.R
\name{projr_build}
\alias{projr_build}
\alias{projr_build_major}
\alias{projr_build_minor}
\alias{projr_build_patch}
\title{Build project to output}
\usage{
projr_build(
  bump_component,
  msg = NULL,
  args_engine = list(),
  profile = NULL,
  archive_github = FALSE,
  archive_local = FALSE,
  always_archive = TRUE,
  clear_output = NULL
)

projr_build_major(
  msg = NULL,
  args_engine = list(),
  profile = NULL,
  archive_github = FALSE,
  archive_local = FALSE,
  always_archive = TRUE,
  clear_output = NULL
)

projr_build_minor(
  msg = NULL,
  args_engine = list(),
  profile = NULL,
  archive_github = FALSE,
  archive_local = FALSE,
  always_archive = TRUE,
  clear_output = NULL
)

projr_build_patch(
  msg = NULL,
  args_engine = list(),
  profile = NULL,
  archive_github = FALSE,
  archive_local = FALSE,
  always_archive = TRUE,
  clear_output = NULL
)
}
\arguments{
\item{bump_component}{"major", "minor", "patch" or missing.
Specifies version component to increment.
If missing, then is set equal to the lowest version component
in used version format.
No default (i.e. is missing by default).}

\item{msg}{character.
Message to append to Git commit messages.
Default is \code{NULL}, in which
case the user is prompted for a message or,
if the session is not interactive, it is
left empty.
Default is \code{NULL}.
Note that the Git messages in this case would not be blank -
they would simply consist of details as to the version
being bumped to and the stage in the build process
at which the commit was made.}

\item{args_engine}{list.
Arguments passed to the
rendering engine
(\code{rmarkdown::render}, \code{quarto::render} or \code{bookdown::render_book}).}

\item{profile}{character.
\code{projr} profile to use. Will set the environment variable
.PROFILE` to this value at the start of the build,}

\item{archive_github}{\code{TRUE},\code{FALSE} orcharacter vector of
directory labels.
If \code{TRUE}, then all directories (\code{raw-data}, \code{output}, etc)
are uploaded to a GitHub release named \code{archive}
as versioned files (e.g. \code{output-v0.1.2.zip}).
If \code{FALSE}, then no directories are uploaded.
If a character vector, then only the directories
specified are uploaded.
Default is \code{FALSE}.
Ignored if there is a release named \code{archive}
already specified as a destination in
the \code{projr} configuration file.}

\item{always_archive}{logical.
If \code{TRUE}, then the directories are uploaded
regardless of whether the directory to be uploaded
has exactly the same contents as the latest version
of the directory on the GitHub release.
Default is \code{TRUE}.
Ignored if there is a release named \code{archive}
already specified as a destination in
the \code{projr} configuration file.}
}
\description{
.build_output` Builds project to output, which
means recording the input and output data hashes,
building the actual bookdown document and
saving and archiving selected output.

.build_major\verb{, .build_minor} and .build_patch\verb{ are wrappers around .build_output} with the version component
bumped set automatically, e.g. .build_major()\verb{ is equivalent projr_build(bump_component = "major")}.
}
