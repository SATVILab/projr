% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yml-dest-wrapper.R
\name{projr_yml_dest_add_osf}
\alias{projr_yml_dest_add_osf}
\alias{projr_yml_dest_add_osf_proj}
\alias{projr_yml_dest_add_osf_comp}
\title{Add an OSF node as a destination}
\usage{
projr_yml_dest_add_osf(
  title,
  content,
  path = NULL,
  structure = NULL,
  overwrite = FALSE,
  public = FALSE,
  category = NULL,
  description = NULL,
  id = NULL,
  id_parent = NULL,
  send_cue = NULL,
  send_strategy = NULL,
  send_inspect = NULL,
  profile = "default"
)

projr_yml_dest_add_osf_proj(
  title,
  description = NULL,
  content = NULL,
  public = FALSE,
  id = NULL
)

projr_yml_dest_add_osf_comp(
  title,
  description = NULL,
  content = NULL,
  public = FALSE,
  category = NULL,
  id_parent = NULL,
  id = NULL
)
}
\arguments{
\item{title}{character.
Title of the OSF node.
For GitHub releases, can use title as \verb{@version},
Note that this implies that a new tag will be created with each
new version, so do not use with large files.
If not supplied, then will
automatically be generated from \code{content}.}

\item{content}{character vector.
Labels of directories to include in the upload.
Options are the labels of directories
in the active \code{projr} configuration,
as well as "docs", "data" and "code".
"docs" means the directory where the documents are rendered to,
"data" means the files in the \code{"data"} directory,
and "code" means all files tracked by the Git repository.}

\item{path}{character.
Path to the directory on the OSF node.}

\item{structure}{"latest" or "version".
Structure of the remote.
If "latest", then \code{path} simply contains
the latest versions of the contents.
If "version", then \code{path} will contain
a directory for each version.
If not supplied, will be \code{version}.}

\item{overwrite}{logical.
Whether to rewrite an existing entry of the same
title in the specified \code{projr} configuration file.
Default is TRUE.}

\item{public}{logical.
Whether the OSF node is public.
Default is \code{FALSE}.}

\item{category}{character. The category of the project or component.
The following are valid options: \code{"project"}, \code{"analysis"},
\code{"communication"}, \code{"data"}, \code{"hypothesis"}, \code{"instrumentation"},
\code{"methods and measures"}, \code{"procedure"}, \code{"project"}, \code{"software"} and other
\code{"other"}. Default is \code{NULL.}}

\item{description}{character.
Description of the OSF node.
Default is \code{NULL}.}

\item{id}{character. The id of the project or component. Must be five
characters. Default is \code{NULL}.}

\item{id_parent}{character. The id of the parent project or component.
Must be five characters. Default is \code{NULL}.}

\item{send_cue}{"always", "if-change" or "never".
Only relevant if \code{structure} is \code{archive}
and \code{send_strategy} is \code{sync-diff} or \code{sync-purge}.
If \code{always}, then a new remote is created
every time, even if there is no change from the previous
build.
For example, if the contents of \code{raw-data} are the same
between builds \code{v0.0.1} and \code{v0.0.2}, then
a local remote would have folders \code{raw-data/v0.0.1}
and \code{raw-data/v0.0.2}.
If \verb{if-change}, then a new remote is created
only if there is a change from the previous build.
In the example above, a local remote would
only have the folder \code{raw-data/v0.0.1}.
If \code{never}, then a new remote is never created.}

\item{send_strategy}{"upload-all", "upload-missing",
"sync-purge" and "sync-diff".
How to synchronise to the remote.
If \code{upload-all}, then all files are uploaded.
If \code{upload-missing}, then only missing files are uploaded.
If \code{sync-purge}, then all files on the remote
are deleted before uploading all local files.
If \code{sync-diff}, then files
that have changed or been added locally are uploaded to the remote,
and files that have been removed locally are removed from the remote.
If not set, then "sync-diff" will be used.}

\item{send_inspect}{"manifest" , "file" or "none".
What to look at to find what are the
files on the remote, and their versions.
If \code{manifest}, then the manifest on the remote is used.
If \code{file}, then the files on the remote are downloaded
and their versions are determined.
If \code{none}, then no inspection is done (the remote
is typically treated as "empty" in that case).
If not set, then defaults to \code{"manifest"}.}

\item{profile}{character.
Profile to write the settings to.
If "default", then written to \verb{_projr.yml},
otherwise written to \verb{_projr-<profile>.yml}.
The default is "default".}
}
\description{
Add an OSF node (project or component)
as a destination to a _projr.yml file.
}
